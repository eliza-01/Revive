# app/launcher.py
import sys
import tkinter as tk
import tkinter.ttk as ttk
import logging

from core.logging_setup import init_logging
from core.connection import ReviveController
from core.connection_test import run_test_command
from core.features.auto_respawn_runner import AutoRespawnRunner
from core.servers.registry import get_server_profile
from core.runtime.poller import RepeaterThread
from core.vision.capture import gdi

from app.ui.updater_dialog import run_update_check
from app.ui.window_probe import WindowProbe
from app.ui.buff_controls import BuffControls
from app.ui.tp_controls import TPControls

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–∫—Å–∏ print
LOG_PATH = init_logging()

class ReviveLauncherUI:
    def __init__(self, root):
        self.root = root

        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.running = False
        self.language = "rus"
        self.language_var = tk.StringVar(value=self.language)
        self.server = "l2mad"
        self.server_var = tk.StringVar(value=self.server)

        # –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.controller = ReviveController()

        # –ø—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞
        self.profile = get_server_profile(self.server)

        # –æ–∫–Ω–æ Lineage
        self.winprobe = WindowProbe(root=self.root, on_found=self._on_window_found)

        # –∞–≤—Ç–æ-—Ä–µ—Å–ø–∞–≤–Ω
        self.respawn = AutoRespawnRunner(
            controller=self.controller,
            window_title="Lineage",
            language=self.language,
            server=self.server,
            poll_interval=3.0,
            debug=True,
        )

        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∏–∫ –±–∞—Ñ–∞
        if hasattr(self.profile, "buff_tick"):
            self.buff_runner = RepeaterThread(
                fn=lambda: self.profile.buff_tick(self.winprobe.current_window_info(), self.controller, language=self.language, debug=True),
                interval=15.0,
                debug=False,
            )
        else:
            self.buff_runner = None

        # UI references
        self.driver_status = None
        self.version_status_label = None
        self.auto_respawn_var = None

        # –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ UI
        self.buff = BuffControls(
            parent=root,  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–∞—Å—Ç–æ—è—â–∏–π parent –∑–∞–¥–∞—ë—Ç—Å—è –≤ build_ui
            profile_getter=lambda: self.profile,
            language_getter=lambda: self.language,
            window_found_getter=lambda: bool(self.winprobe.window_found),
        )
        self.tp = None  # —Å–æ–∑–¥–∞–¥–∏–º –≤ build_ui –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å Arduino
        try:
            self.controller.send("ping")
            response = self.controller.read()
            print("[‚úì] Arduino –æ—Ç–≤–µ—Ç–∏–ª–∞" if response == "pong" else "[√ó] –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        except Exception as e:
            print(f"[√ó] –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Arduino: {e}")

        # –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
        self.update_window_ref = None

    # ---------- UI ----------
    def build_ui(self, parent: tk.Widget, local_version: str):
        # –±–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –æ–∫–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        window_frame = tk.Frame(parent)
        window_frame.pack(pady=(2, 10))
        tk.Button(window_frame, text="üîç –ù–∞–π—Ç–∏ –æ–∫–Ω–æ Lineage", command=self.winprobe.try_find_window_again).pack(side="left", padx=(0, 8))
        window_status_label = tk.Label(window_frame, text="[?] –ü–æ–∏—Å–∫ –æ–∫–Ω–∞...", font=("Arial", 9), fg="gray")
        window_status_label.pack(side="left")
        self.winprobe.attach_status_label(window_status_label)

        # —è–∑—ã–∫
        lang_frame = tk.Frame(parent)
        lang_frame.pack(pady=(5, 2))
        tk.Label(lang_frame, text="–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", font=("Arial", 10)).pack(side="left", padx=(0, 6))
        ttk.OptionMenu(
            lang_frame, self.language_var, self.language_var.get(), "rus", "eng", command=self.set_language
        ).pack(side="left")

        # —Å–µ—Ä–≤–µ—Ä
        server_frame = tk.Frame(parent)
        server_frame.pack(pady=(2, 6))
        tk.Label(server_frame, text="–°–µ—Ä–≤–µ—Ä:", font=("Arial", 10)).pack(side="left", padx=(0, 34))
        ttk.OptionMenu(
            server_frame, self.server_var, self.server_var.get(), "l2mad", command=self.set_server
        ).pack(side="left")

        # –∫–æ–Ω–Ω–µ–∫—Ç/–¥—Ä–∞–π–≤–µ—Ä
        self.driver_status = tk.Label(parent, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", fg="gray")
        tk.Button(parent, text="üß™ –¢–µ—Å—Ç –∫–æ–Ω–Ω–µ–∫—Ç–∞", command=lambda: run_test_command(self.controller, self.driver_status)).pack(pady=5)
        self.driver_status.pack(pady=(0, 5))

        # –≤–µ—Ä—Å–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        version_frame = tk.Frame(parent)
        version_frame.pack(padx=10, pady=10, fill="x")
        version_label = tk.Label(version_frame, text=f"–í–µ—Ä—Å–∏—è: {local_version}", font=("Arial", 10))
        version_label.pack()
        self.version_status_label = tk.Label(version_frame, text="", font=("Arial", 9), fg="orange")
        self.version_status_label.pack()
        tk.Button(version_frame, text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", command=lambda: run_update_check(local_version, self.version_status_label, self.root, self)).pack()

        # TPControls –∂–∏–≤—ë—Ç —Ä—è–¥–æ–º —Å –≤–µ—Ä—Å–∏–µ–π
        self.tp = TPControls(
            parent=version_frame,
            controller=self.controller,
            get_language=lambda: self.language,
            get_window_info=lambda: self.winprobe.current_window_info(),
            check_is_dead=self._check_is_dead,
        )
        self.tp.pack(anchor="w", fill="x")

        # –∞–≤—Ç–æ–ø–æ–¥—ä—ë–º
        self.auto_respawn_var = tk.BooleanVar()
        tk.Checkbutton(
            parent,
            text="–í—Å—Ç–∞—Ç—å –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ üíÄ",
            font=("Arial", 14, "bold"),
            variable=self.auto_respawn_var,
            command=lambda: self.on_toggle_auto_respawn(self.auto_respawn_var.get()),
        ).pack(pady=3)

        # –±–ª–æ–∫ –±–∞—Ñ–∞ (–≤–ø–∏—Å—ã–≤–∞–µ–º –≤ parent –Ω–∏–∂–µ —á–µ–∫–±–æ–∫—Å–∞)
        self.buff.frame.master = parent  # –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞–∂–µ–º –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç –∞–≤—Ç–æ–ø–æ–¥—ä—ë–º

        # –≤—ã—Ö–æ–¥
        tk.Button(parent, text="–í—ã—Ö–æ–¥", fg="red", command=self.exit_program).pack(side="bottom", pady=10)

    # ---------- callbacks ----------
    def set_language(self, lang):
        self.language = (lang or "rus").lower()
        print(f"[UI] –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.language}")
        self.respawn.set_language(self.language)

    def set_server(self, server):
        self.server = (server or "l2mad").lower()
        print(f"[UI] –°–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.server}")
        self.respawn.set_server(self.server)
        # –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.profile = get_server_profile(self.server)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞—Ñ–∞
        self.buff.refresh_enabled(self.profile)

    def on_toggle_auto_respawn(self, is_enabled):
        if is_enabled:
            if not self.winprobe.window_found:
                print("[UI] –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å, –ø–æ–∫–∞ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ (–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–π—Ç–∏ –æ–∫–Ω–æ¬ª).")
                return
            if not self.respawn.is_running():
                self.respawn.set_post_respawn_hook(lambda win: self._post_respawn_actions(win))
                self.respawn.start()
            print("[UI] –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∞–Ω–∏–µ –í–ö–õ")
            self.running = True
            self.buff.pack()
            # –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω buff_runner –∏ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –±–∞—Ñ –≤–∫–ª—é—á–∞—Ç ‚Äî –æ–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ –∞–≤—Ç–æ–ø–æ–∏—Å–∫—É
        else:
            print("[UI] –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∞–Ω–∏–µ –í–´–ö–õ")
            self.running = False
            self.respawn.stop()
            self.buff.pack_forget()
            self.buff.enabled_var.set(False)

    def _post_respawn_actions(self, window_info: dict):
        # 1) –ë–∞—Ñ
        if self.buff.is_enabled() and getattr(self.profile, "supports_buffing", lambda: False)():
            try:
                mode = self.buff.get_mode()
                print(f"[buff] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–∞—Ñ–∞: mode={mode} lang={self.language}")
                ok = self.profile.apply_post_respawn_buff(
                    window_info,
                    self.controller,
                    mode=mode,
                    language=self.language,
                    debug=False,
                )
                if not ok:
                    print("[buff] –°—Ü–µ–Ω–∞—Ä–∏–π –±–∞—Ñ–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"[buff] –û—à–∏–±–∫–∞ post-respawn: {e}")
        else:
            print("[buff] –ü—Ä–æ–ø—É—Å–∫: –∞–≤—Ç–æ–±–∞—Ñ –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

        # 2) –¢–ü
        try:
            if self.tp.is_enabled():
                # –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ
                worker = self.tp._ensure_worker()
                worker.window = window_info
                cat, loc = self.tp.selection()
                print(f"[tp] –ü–æ–ø—ã—Ç–∫–∞ –¢–ü ‚Üí {cat} / {loc}")
                ok_tp = self.tp.teleport_now_selected()
                if ok_tp:
                    print(f"[tp] –£—Å–ø–µ—à–Ω–æ: {cat} ‚Üí {loc}")
                else:
                    print(f"[tp] –ù–µ —É–¥–∞–ª–æ—Å—å –¢–ü: {cat} ‚Üí {loc}")
            else:
                print("[tp] –ü—Ä–æ–ø—É—Å–∫: –¢–ü –≤—ã–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ª–æ–∫–∞—Ü–∏—è")
        except Exception as e:
            print(f"[tp] –û—à–∏–±–∫–∞ –¢–ü –ø–æ—Å–ª–µ —Ä–µ—Å–ø–∞–≤–Ω–∞: {e}")

    def _on_window_found(self, _info: dict):
        # –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –±–∞—Ñ–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏—Ç —á–µ–∫–±–æ–∫—Å
        if self.buff_runner and self.buff.is_enabled():
            if not self.buff_runner.is_running():
                self.buff_runner.start()

    # ==== Death detection adapter for TP worker ====
    def _check_is_dead(self) -> bool:
        try:
            if hasattr(self.respawn, "is_dead"):
                return bool(self.respawn.is_dead())
            return False
        except Exception:
            return False

    def exit_program(self):
        try:
            self.respawn.stop()
        except Exception:
            pass
        try:
            if self.buff_runner:
                self.buff_runner.stop()
        except Exception:
            pass
        if self.controller:
            try:
                self.controller.close()
            except Exception:
                pass
        self.root.destroy()
        sys.exit(0)

def launch_gui(local_version: str):
    root = tk.Tk()
    root.title("Revive Launcher")
    root.geometry("400x560")
    root.resizable(False, False)

    tk.Label(root, text="Revive", font=("Arial", 20, "bold"), fg="orange").pack(pady=10)
    tk.Label(root, text="–§—É–Ω–∫—Ü–∏–∏:", font=("Arial", 12, "bold")).pack(pady=(5))

    parent = tk.Frame(root)
    parent.pack(pady=10)

    app = ReviveLauncherUI(root)
    app.build_ui(parent, local_version)

    root.protocol("WM_DELETE_WINDOW", app.exit_program)
    logging.info("[launcher] loaded")

    # —Ñ–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    def schedule_update_check():
        run_update_check(local_version, app.version_status_label, root, app)
        root.after(600_000, schedule_update_check)

    schedule_update_check()
    root.mainloop()
